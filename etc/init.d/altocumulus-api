#!/bin/sh
### BEGIN INIT INFO
# Provides:          altocumulus
# Required-Start:    hostname $local_fs
# Required-Stop:
# Should-Start:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Create HTTP API server for Openstack Cumulus ML2 plugin
# Description:       This script creates the API server to interact with the
#                    ML2 plugin on the openstack controller. It will allow
#                    Neutron to dynamically configure vlans and bridging on
#                    the cumulus switch.
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

DAEMON=/usr/local/bin/altocumulus-api
DAEMON_NAME=altocumulus-api
DESC="Cumulus ML2 Plugin HTTP API server"

# Add any command line options for your daemon here
DAEMON_OPTS="--config-file /etc/altocumulus/config.yaml"

# This next line determines what user the script runs as.
DAEMON_USER=root

# The process ID of the script when it runs is stored here:
PIDFILE=/var/run/altocumulus/$DAEMON_NAME.pid
PPIDFILE=/var/run/altocumulus/$DAEMON_NAME.ppid

. /lib/lsb/init-functions

do_start () {

    # /var/run may be volatile, so we need to ensure that
    # /var/run/$PACKAGE exists here as well as in postinst
    if [ ! -d /var/run/altocumulus ]; then
        mkdir /var/run/altocumulus
        chown cumulus:nogroup /var/run/altocumulus
    fi

    log_daemon_msg "Starting system $DAEMON_NAME daemon"
    #altocumulus-api forks a child process
    start-stop-daemon --start --quiet --background --pidfile $PIDFILE --make-pidfile \
        --user $DAEMON_USER --chuid $DAEMON_USER --exec $DAEMON -- $DAEMON_OPTS
    log_end_msg $?
}
do_stop () {
    log_daemon_msg "Stopping system $DAEMON_NAME daemon"

    # Need to get the parent process ID
    pgrep -P `cat $PIDFILE` > $PPIDFILE

    start-stop-daemon --stop --pidfile $PPIDFILE --retry 10
    start-stop-daemon --stop --pidfile $PIDFILE --retry 10
    log_end_msg $?
}

case "$1" in

    start|stop)
        do_${1}
        ;;

    restart|reload|force-reload)
        do_stop
        do_start
        ;;

    status)
        status_of_proc "$DAEMON_NAME" "$DAEMON" && exit 0 || exit $?
        ;;

    *)
        echo "Usage: /etc/init.d/$DAEMON_NAME {start|stop|restart|status}"
        exit 1
        ;;

esac
exit 0
